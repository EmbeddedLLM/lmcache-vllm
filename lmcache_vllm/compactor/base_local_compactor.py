import abc
from typing import Tuple, List, Dict
import torch

# FIXME(Jiayi): this LocalCompactor design need to be 
# compatible with PP/TP some how
class BaseLocalCompactor(metaclass=abc.ABCMeta):
    """
    Interface for local compactor
    """
    
    @abc.abstractmethod
    def update_importance_scores(
        self,
        new_attetnion_values: torch.Tensor):
        """
        update attention_importance scores based on the newly
        generated attetnion values
        """
        raise NotImplementedError
        
    
    @abc.abstractmethod
    def compute_indices(self):
        """
        compute the indices based on the attention values
        """
        raise NotImplementedError
    
    @abc.abstractmethod
    def compact_memory(self, kv_mmap):
        """
        perform the actual memory movement according to
        the `kv_mmap` generated by the scheduler
        """
        raise NotImplementedError

